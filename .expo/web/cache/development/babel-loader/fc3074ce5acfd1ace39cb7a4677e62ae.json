{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport * as Location from 'expo-location';\nimport * as Permissions from 'expo-permissions';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Text } from 'react-native-paper';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useState = React.useState,\n    useEffect = React.useEffect;\nexport default function MapScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      locationResult = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mapRegion = _useState4[0],\n      setRegion = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      hasLocationPermissions = _useState6[0],\n      setLocationPermission = _useState6[1];\n\n  useEffect(function () {\n    var getLocationAsync = function getLocationAsync() {\n      var _await$Permissions$as, status, _await$Location$getCu, _await$Location$getCu2, latitude, longitude;\n\n      return _regeneratorRuntime.async(function getLocationAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.LOCATION));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              if ('granted' !== status) {\n                setLocation('Permission to access location was denied');\n              } else {\n                setLocationPermission(true);\n              }\n\n              _context.next = 7;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 7:\n              _await$Location$getCu = _context.sent;\n              _await$Location$getCu2 = _await$Location$getCu.coords;\n              latitude = _await$Location$getCu2.latitude;\n              longitude = _await$Location$getCu2.longitude;\n              setLocation(JSON.stringify({\n                latitude: latitude,\n                longitude: longitude\n              }));\n              setRegion({\n                latitude: latitude,\n                longitude: longitude,\n                latitudeDelta: 0.0922,\n                longitudeDelta: 0.0421\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getLocationAsync();\n  });\n\n  if (locationResult === null) {\n    return _jsx(Text, {\n      children: \"Finding your current location...\"\n    });\n  }\n\n  if (hasLocationPermissions === false) {\n    return _jsx(Text, {\n      children: \"Location permissions are not granted.\"\n    });\n  }\n\n  if (mapRegion === null) {\n    return _jsx(Text, {\n      children: \"Map region doesn't exist.\"\n    });\n  }\n\n  return _jsx(MapView, {\n    style: styles.container,\n    provider: PROVIDER_GOOGLE,\n    region: mapRegion,\n    onRegionChange: function onRegionChange(region) {\n      return setRegion(region);\n    },\n    children: _jsx(MapView.Marker, {\n      title: \"YIKES, Inc.\",\n      description: \"Web Design and Development\",\n      coordinate: {\n        \"latitude\": 39.969183,\n        \"longitude\": -75.133308\n      }\n    })\n  });\n}\nMapScreen.navigationOptions = {\n  header: null\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/hendrik/Documents/mobiledev/mapareacalc/src/MapScreen.js"],"names":["React","MapView","PROVIDER_GOOGLE","Location","Permissions","Text","useState","useEffect","MapScreen","navigation","locationResult","setLocation","mapRegion","setRegion","hasLocationPermissions","setLocationPermission","getLocationAsync","askAsync","LOCATION","status","getCurrentPositionAsync","coords","latitude","longitude","JSON","stringify","latitudeDelta","longitudeDelta","styles","container","region","navigationOptions","header","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\r\nimport * as Location from 'expo-location'\r\nimport * as Permissions from 'expo-permissions'\r\nimport { StyleSheet } from 'react-native'\r\nimport { Text } from 'react-native-paper'\r\n\r\n\r\nconst { useState, useEffect } = React\r\n\r\nexport default function MapScreen({navigation}) {\r\n\r\n    const [ locationResult, setLocation ] = useState( null )\r\n    const [ mapRegion, setRegion ] = useState( null )\r\n    const [ hasLocationPermissions, setLocationPermission ] = useState( false )\r\n\r\n    useEffect( () => {\r\n        const getLocationAsync = async () => {\r\n            let { status } = await Permissions.askAsync( Permissions.LOCATION )\r\n            if ( 'granted' !== status ) {\r\n                setLocation( 'Permission to access location was denied' )\r\n            } else {\r\n                setLocationPermission( true );\r\n            }\r\n\r\n            let { coords: { latitude, longitude } } = await Location.getCurrentPositionAsync({})\r\n            setLocation( JSON.stringify( { latitude, longitude } ) )\r\n            \r\n            // Center the map on the location we just fetched.\r\n            setRegion( { latitude, longitude, latitudeDelta: 0.0922, longitudeDelta: 0.0421 } );\r\n        }\r\n\r\n        getLocationAsync()\r\n    } )\r\n\r\n    if ( locationResult === null ) {\r\n        return <Text>Finding your current location...</Text>\r\n    }\r\n\r\n    if ( hasLocationPermissions === false ) {\r\n        return <Text>Location permissions are not granted.</Text>\r\n    }\r\n\r\n    if ( mapRegion === null ) {\r\n        return <Text>Map region doesn't exist.</Text>\r\n    }\r\n\r\n    return (\r\n            <MapView\r\n                style={ styles.container }\r\n                provider={PROVIDER_GOOGLE}\r\n                region={ mapRegion }\r\n                onRegionChange={ region => setRegion( region )}\r\n            >\r\n                <MapView.Marker\r\n                    title=\"YIKES, Inc.\"\r\n                    description=\"Web Design and Development\"\r\n                    coordinate={{\"latitude\":39.969183,\"longitude\":-75.133308}}\r\n                />\r\n            </MapView>\r\n    )\r\n}\r\n\r\nMapScreen.navigationOptions = {\r\n    header: null\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n    },\r\n})"]},"metadata":{},"sourceType":"module"}