{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport * as Location from 'expo-location';\nimport MapView, { Marker } from 'react-native-maps';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { Constants, Permissions } from 'expo';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Perimiter(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  var handlePress = function handlePress() {\n    navigation.replace('Dashboard');\n  };\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n    console.log(location.coord);\n  }\n\n  Location.getCurrentPosition(function (position) {\n    var currentLongitude = JSON.stringify(position.coords.longitude);\n    var currentLatitude = JSON.stringify(position.coords.latitude);\n  }, function (error) {\n    return alert(error.message);\n  }, {\n    enableHighAccuracy: true,\n    timeout: 20000,\n    maximumAge: 1000\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Perimiter\"\n    }), \"\\n\", _jsxs(Text, {\n      style: styles.boldText,\n      children: [\"You are Here\", gcurrentLongitude]\n    }), \"\\n\", _jsxs(Text, {\n      style: styles.boldText,\n      children: [\"You are Here\", currentLatitude]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handlePress,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Back\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 50,\n    padding: 16\n  },\n  boldText: {\n    fontSize: 30,\n    color: 'red'\n  },\n  map: {\n    width: Dimensions.get('screen').width,\n    height: Dimensions.get('screen').height * 0.90\n  }\n});","map":{"version":3,"sources":["C:/Users/hendrik/Documents/mobiledev/mapareacalc/src/Perimiter.js"],"names":["React","useState","useEffect","TouchableOpacity","Location","MapView","Marker","FontAwesome","Constants","Permissions","Perimiter","navigation","location","setLocation","errorMsg","setErrorMsg","handlePress","replace","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","text","JSON","stringify","console","log","coord","getCurrentPosition","position","currentLongitude","coords","longitude","currentLatitude","latitude","error","alert","message","enableHighAccuracy","timeout","maximumAge","styles","container","title","boldText","gcurrentLongitude","button","buttonText","StyleSheet","create","flex","alignItems","justifyContent","marginTop","padding","fontSize","color","map","width","Dimensions","get","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Dimensions } from 'react-native';\r\nimport { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport * as Location from 'expo-location';\r\nimport MapView, { Marker } from 'react-native-maps';\r\nimport { FontAwesome } from '@expo/vector-icons';\r\nimport { Constants, Permissions } from 'expo';\r\n\r\n\r\n\r\nexport default function Perimiter({navigation}) {\r\n    const [location, setLocation] = useState(null);\r\n    const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n    const handlePress = () => {\r\n      navigation.replace('Dashboard');\r\n    };\r\n    \r\n    useEffect(() => {\r\n      (async () => {\r\n        let { status } = await Location.requestForegroundPermissionsAsync();\r\n        if (status !== 'granted') {\r\n          setErrorMsg('Permission to access location was denied');\r\n          return;\r\n        }\r\n\r\n        let location = await Location.getCurrentPositionAsync({});\r\n        setLocation(location);\r\n        \r\n      })();\r\n    }, []);\r\n  \r\n    let text = 'Waiting..';\r\n    if (errorMsg) {\r\n      text = errorMsg;\r\n    } else if (location) {\r\n      text = JSON.stringify(location);\r\n      console.log(location.coord);\r\n    }\r\n\r\n    Location.getCurrentPosition(\r\n      //Will give you the current location\r\n      (position) => {\r\n        //getting the Longitude from the location json\r\n        const currentLongitude =\r\n          JSON.stringify(position.coords.longitude);\r\n  \r\n        //getting the Latitude from the location json\r\n        const currentLatitude =\r\n          JSON.stringify(position.coords.latitude);\r\n          \r\n      }, (error) => alert(error.message), { \r\n        enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 \r\n      }\r\n    )\r\n  \r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}>Perimiter</Text>\r\n        {`\\n`}\r\n        <Text style={styles.boldText}>You are Here{gcurrentLongitude}</Text>\r\n        {`\\n`}\r\n        <Text style={styles.boldText}>You are Here{currentLatitude}</Text>\r\n        {/* <MapView style={styles.map}>\r\n                {location ? (\r\n                    <Marker coordinate={location} title=\"My location\" >\r\n                        <FontAwesome name=\"map-marker\" size={40} color=\"#B12A5B\" />\r\n                    </Marker>\r\n                ):\r\n                    <Text>{errorMsg}</Text>\r\n                }\r\n            </MapView> */}\r\n        <TouchableOpacity style={styles.button} onPress={handlePress}>\r\n          <Text style={styles.buttonText}>Back</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      \r\n    );\r\n    }\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginTop: 50,\r\n    padding: 16,\r\n  },\r\n  boldText: {\r\n    fontSize: 30,\r\n    color: 'red',\r\n  },\r\n  map: {\r\n    width: Dimensions.get('screen').width,\r\n    height: Dimensions.get('screen').height * 0.90,\r\n  }, \r\n});"]},"metadata":{},"sourceType":"module"}