import React, { useState, useEffect } from 'react';
import { FlatList, Modal, StyleSheet, Text, TextInput, View, Pressable} from 'react-native';
import { TouchableOpacity } from 'react-native-gesture-handler';
import { DataStore } from 'aws-amplify';
import { Location } from './models';

const Header = () => (
  <View style={styles.headerContainer}>
    <Text style={styles.headerTitle}>My Location List</Text>
  </View>
);

const AddLocationModal = ({ modalVisible, setModalVisible }) => {
  const [location1, setLocation1] = useState('');
  const [location2, setLocation2] = useState('');
  const [location3, setLocation3] = useState('');
  const [location4, setLocation4] = useState('');

  async function addLocation() {
    await DataStore.save(new Location({ location1, location2, location3, location4, isComplete: false }));
    setModalVisible(false);
    setLocation1('');
    setLocation2('');
    setLocation3('');
    setLocation4('');
  }

  function closeModal() {
    setModalVisible(false);
  }

  return (
    <Modal
      animationType="fade"
      onRequestClose={closeModal}
      transparent
      visible={modalVisible}
    >
      <View style={styles.modalContainer}>
        <View style={styles.modalInnerContainer}>
          <Pressable onPress={closeModal} style={styles.modalDismissButton}>
            <Text style={styles.modalDismissText}>X</Text>
          </Pressable>
          <TextInput
            onChangeText={setLocation1}
            placeholder="Location1"
            style={styles.modalInput}
          />
          <TextInput
            onChangeText={setLocation2}
            placeholder="Location2"
            style={styles.modalInput}
          />
            <TextInput
            onChangeText={setLocation3}
            placeholder="Location3"
            style={styles.modalInput}
          />
            <TextInput
            onChangeText={setLocation4}
            placeholder="Location4"
            style={styles.modalInput}
          />
          <Pressable onPress={addLocation} style={styles.buttonContainer}>
            <Text style={styles.buttonText}>Save Location</Text>
          </Pressable>
        </View>
      </View>
    </Modal>
  );
};

const LocationList = () => {
  const [locations, setLocations] = useState([]);

  useEffect(() => {

    //query the initial todolist and subscribe to data updates
    const subscription = DataStore.observeQuery(Location).subscribe((snapshot) => {
      //isSynced can be used to show a loading spinner when the list is being loaded. 
      const { items, isSynced } = snapshot;
      setLocations(items);
    });

    //unsubscribe to data updates when component is destroyed so that we don’t introduce a memory leak.
    return function cleanup() {
      subscription.unsubscribe();
    }

  }, []);

  async function deleteLocation(item) {
    try {
        await DataStore.delete(item);
      } catch (e) {
        console.log('Delete failed: $e');
      }
  }

  async function setComplete(updateValue, location) {
       //update the location item with updateValue
       await DataStore.save(
        Location.copyOf(location, updated => {
          updated.isComplete = updateValue
        })
      );
  }

  const renderItem = ({ item }) => (
    <TouchableOpacity
      onLongPress={() => {
        deleteLocation(item);
      }}
      onPress={() => {
        setComplete(!item.isComplete, item);
      }}
      style={styles.locationContainer}
    >
      <Text>
        {`\n${item.location1}`}
        {`\n${item.location2}`}
        {`\n${item.location3}`}
        {`\n${item.location4}`}
      </Text>

      <Text
        style={[styles.checkbox, item.isComplete && styles.completedCheckbox]}
      >
        {item.isComplete ? '✓' : ''}
      </Text>
    </TouchableOpacity>
  );

  return (
    <FlatList
      data={locations}
      keyExtractor={({ id }) => id}
      renderItem={renderItem}
    />
  );
};

export default function Events ({ navigation }) {

  const [modalVisible, setModalVisible] = useState(false);

  const handlePress = () => {
    navigation.replace('Dashboard');
  };

  return (
    <View style={styles.container} >
        <Header />
        <LocationList />
        <TouchableOpacity
            onPress={() => {
            setModalVisible(true);
        }}
        style={[styles.buttonContainer, styles.floatingButton]}
        >
        <Text style={styles.buttonText}>+ Add Location</Text>
        </TouchableOpacity>
        <AddLocationModal
            modalVisible={modalVisible}
            setModalVisible={setModalVisible}
        />
        <TouchableOpacity style={styles.button} onPress={handlePress}>
            <Text style={styles.buttonText}>Back</Text>
        </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
container: {
    height: '100%',
    width: '100%',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
    },
    headerContainer: {
    backgroundColor: '#4696ec',
    //paddingTop: Platform.OS === 'ios' ? 44 : 0,
    },
    headerTitle: {
    color: '#fff',
    fontSize: 20,
    fontWeight: '600',
    paddingVertical: 16,
    textAlign: 'center',
    },
    locationContainer: {
    alignItems: 'center',
    backgroundColor: '#fff',
    borderRadius: 2,
    elevation: 4,
    flexDirection: 'row',
    marginHorizontal: 8,
    marginVertical: 4,
    padding: 8,
    shadowOffset: {
    height: 1,
    width: 1,
    },
    shadowOpacity: 0.3,
    shadowRadius: 2,
    },
     locationHeading: {
    fontSize: 20,
    fontWeight: '600',
    },
    checkbox: {
    borderRadius: 2,
    borderWidth: 2,
    fontWeight: '700',
    height: 20,
    marginLeft: 'auto',
    textAlign: 'center',
    width: 20,
    },
    completedCheckbox: {
    backgroundColor: '#000',
    color: '#fff',
    },
    buttonText: {
    color: '#fff',
    fontWeight: '600',
    padding: 16,
    },
    buttonContainer: {
    alignSelf: 'center',
    backgroundColor: '#4696ec',
    borderRadius: 99,
    paddingHorizontal: 8,
    },
    floatingButton: {
    //position: 'absolute',
    //bottom: 44,
    elevation: 6,
    shadowOffset: {
    height: 4,
    width: 1,
    },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    },
    modalContainer: {
    backgroundColor: 'rgba(0,0,0,0.5)',
    flex: 1,
    justifyContent: 'center',
    padding: 16,
  },
  modalInnerContainer: {
    backgroundColor: '#fff',
    borderRadius: 16,
    justifyContent: 'center',
    padding: 16,
  },
  modalInput: {
    borderBottomWidth: 1,
    marginBottom: 16,
    padding: 8,
  },
  modalDismissButton: {
    marginLeft: 'auto',
  },
  modalDismissText: {
    fontSize: 20,
    fontWeight: '700',
  },
});