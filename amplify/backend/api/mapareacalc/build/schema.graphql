
type Location @aws_iam @aws_api_key {
  id: ID!
  location1latitude: String
  location1longitude: String
  location2latitude: String
  location2longitude: String
  location3latitude: String
  location3longitude: String
  location4latitude: String
  location4longitude: String
  isComplete: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelLocationConnection @aws_api_key @aws_iam {
  items: [Location]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelLocationFilterInput {
  id: ModelIDInput
  location1latitude: ModelStringInput
  location1longitude: ModelStringInput
  location2latitude: ModelStringInput
  location2longitude: ModelStringInput
  location3latitude: ModelStringInput
  location3longitude: ModelStringInput
  location4latitude: ModelStringInput
  location4longitude: ModelStringInput
  isComplete: ModelBooleanInput
  and: [ModelLocationFilterInput]
  or: [ModelLocationFilterInput]
  not: ModelLocationFilterInput
}

type Query {
  getLocation(id: ID!): Location @aws_api_key @aws_iam
  listLocations(filter: ModelLocationFilterInput, limit: Int, nextToken: String): ModelLocationConnection @aws_api_key @aws_iam
  syncLocations(filter: ModelLocationFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelLocationConnection @aws_api_key @aws_iam
}

input ModelLocationConditionInput {
  location1latitude: ModelStringInput
  location1longitude: ModelStringInput
  location2latitude: ModelStringInput
  location2longitude: ModelStringInput
  location3latitude: ModelStringInput
  location3longitude: ModelStringInput
  location4latitude: ModelStringInput
  location4longitude: ModelStringInput
  isComplete: ModelBooleanInput
  and: [ModelLocationConditionInput]
  or: [ModelLocationConditionInput]
  not: ModelLocationConditionInput
}

input CreateLocationInput {
  id: ID
  location1latitude: String
  location1longitude: String
  location2latitude: String
  location2longitude: String
  location3latitude: String
  location3longitude: String
  location4latitude: String
  location4longitude: String
  isComplete: Boolean
  _version: Int
}

input UpdateLocationInput {
  id: ID!
  location1latitude: String
  location1longitude: String
  location2latitude: String
  location2longitude: String
  location3latitude: String
  location3longitude: String
  location4latitude: String
  location4longitude: String
  isComplete: Boolean
  _version: Int
}

input DeleteLocationInput {
  id: ID!
  _version: Int
}

type Mutation {
  createLocation(input: CreateLocationInput!, condition: ModelLocationConditionInput): Location @aws_api_key @aws_iam
  updateLocation(input: UpdateLocationInput!, condition: ModelLocationConditionInput): Location @aws_api_key @aws_iam
  deleteLocation(input: DeleteLocationInput!, condition: ModelLocationConditionInput): Location @aws_api_key @aws_iam
}

type Subscription {
  onCreateLocation: Location @aws_subscribe(mutations: ["createLocation"]) @aws_api_key @aws_iam
  onUpdateLocation: Location @aws_subscribe(mutations: ["updateLocation"]) @aws_api_key @aws_iam
  onDeleteLocation: Location @aws_subscribe(mutations: ["deleteLocation"]) @aws_api_key @aws_iam
}

